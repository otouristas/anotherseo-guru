/*
  # Comprehensive SEO Platform Database Schema
  
  This migration creates all missing tables for the complete SEO SaaS platform.
  Covers all modules: AI, Enterprise, Analytics, and remaining SEO components.
  
  ## Modules Covered:
  - AI Content Strategy Generator
  - Predictive SEO Analytics  
  - AI SERP Optimizer
  - Advanced Performance Dashboard
  - Team Collaboration Suite
  - Query Wheel (Enterprise)
  - Intent Matcher (Enterprise)
  - AIO Optimizer (Enterprise)
  - Public Research Real Time
  - Advanced Analytics
  - Content Repurposing
  - Revenue Attribution
  - Multi-Location Tracking
  - White Label Reports
  - Cross-Channel Analytics
  
  ## Security:
  - Row Level Security (RLS) enabled on all tables
  - Project-based access control
  - User-based data isolation
  
  ## Performance:
  - Optimized indexes for all major queries
  - Foreign key relationships properly indexed
  - Composite indexes for multi-column queries
*/

-- =============================================================================
-- AI CONTENT STRATEGY GENERATOR TABLES
-- =============================================================================

-- Content strategies generated by AI
CREATE TABLE IF NOT EXISTS content_strategies (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    project_id UUID NOT NULL REFERENCES seo_projects(id) ON DELETE CASCADE,
    strategy_name TEXT NOT NULL,
    industry TEXT,
    target_audience TEXT,
    business_goals TEXT,
    content_goals TEXT,
    budget TEXT,
    timeline TEXT,
    team_size TEXT,
    existing_content TEXT,
    competitors TEXT,
    brand_voice TEXT DEFAULT 'professional',
    total_content_pieces INTEGER DEFAULT 0,
    estimated_traffic INTEGER DEFAULT 0,
    time_to_complete TEXT,
    priority_score DECIMAL(5, 2) DEFAULT 0,
    status TEXT DEFAULT 'draft' CHECK (status IN ('draft', 'active', 'completed', 'archived')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Content pillars within strategies
CREATE TABLE IF NOT EXISTS content_pillars (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    strategy_id UUID NOT NULL REFERENCES content_strategies(id) ON DELETE CASCADE,
    pillar_name TEXT NOT NULL,
    topics TEXT[] DEFAULT '{}',
    keywords TEXT[] DEFAULT '{}',
    estimated_posts INTEGER DEFAULT 0,
    traffic_potential INTEGER DEFAULT 0,
    priority TEXT DEFAULT 'medium' CHECK (priority IN ('high', 'medium', 'low')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Content calendar items
CREATE TABLE IF NOT EXISTS content_calendar_items (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    strategy_id UUID NOT NULL REFERENCES content_strategies(id) ON DELETE CASCADE,
    pillar_id UUID REFERENCES content_pillars(id) ON DELETE SET NULL,
    scheduled_date DATE NOT NULL,
    content_type TEXT NOT NULL CHECK (content_type IN ('blog', 'video', 'infographic', 'podcast', 'social', 'email')),
    topic TEXT NOT NULL,
    keywords TEXT[] DEFAULT '{}',
    estimated_traffic INTEGER DEFAULT 0,
    status TEXT DEFAULT 'planned' CHECK (status IN ('planned', 'in-progress', 'published', 'cancelled')),
    assigned_to UUID REFERENCES auth.users(id),
    notes TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Competitor content gaps
CREATE TABLE IF NOT EXISTS competitor_content_gaps (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    strategy_id UUID NOT NULL REFERENCES content_strategies(id) ON DELETE CASCADE,
    topic TEXT NOT NULL,
    competitor_domain TEXT NOT NULL,
    opportunity_description TEXT,
    difficulty_score DECIMAL(3, 2) DEFAULT 0 CHECK (difficulty_score >= 0 AND difficulty_score <= 1),
    potential_score DECIMAL(3, 2) DEFAULT 0 CHECK (potential_score >= 0 AND potential_score <= 1),
    priority TEXT DEFAULT 'medium' CHECK (priority IN ('high', 'medium', 'low')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =============================================================================
-- PREDICTIVE SEO ANALYTICS TABLES
-- =============================================================================

-- Predictive analytics models
CREATE TABLE IF NOT EXISTS predictive_models (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    project_id UUID NOT NULL REFERENCES seo_projects(id) ON DELETE CASCADE,
    model_name TEXT NOT NULL,
    model_type TEXT NOT NULL CHECK (model_type IN ('ranking_prediction', 'traffic_forecast', 'content_performance', 'competitor_analysis')),
    algorithm TEXT NOT NULL,
    training_data JSONB DEFAULT '{}',
    model_parameters JSONB DEFAULT '{}',
    accuracy_score DECIMAL(5, 4) DEFAULT 0,
    status TEXT DEFAULT 'training' CHECK (status IN ('training', 'active', 'deprecated', 'failed')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Predictive forecasts
CREATE TABLE IF NOT EXISTS predictive_forecasts (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    project_id UUID NOT NULL REFERENCES seo_projects(id) ON DELETE CASCADE,
    model_id UUID NOT NULL REFERENCES predictive_models(id) ON DELETE CASCADE,
    forecast_type TEXT NOT NULL CHECK (forecast_type IN ('ranking', 'traffic', 'revenue', 'competitor_movement')),
    target_entity TEXT NOT NULL, -- keyword, page, competitor, etc.
    forecast_period TEXT NOT NULL, -- '7d', '30d', '90d', '1y'
    forecast_date DATE NOT NULL,
    predicted_value DECIMAL(15, 4) NOT NULL,
    confidence_interval JSONB DEFAULT '{}',
    actual_value DECIMAL(15, 4),
    accuracy_score DECIMAL(5, 4),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =============================================================================
-- AI SERP OPTIMIZER TABLES
-- =============================================================================

-- SERP feature analysis
CREATE TABLE IF NOT EXISTS serp_feature_analysis (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    project_id UUID NOT NULL REFERENCES seo_projects(id) ON DELETE CASCADE,
    keyword TEXT NOT NULL,
    current_rank INTEGER,
    feature_type TEXT NOT NULL CHECK (feature_type IN ('featured_snippet', 'people_also_ask', 'related_searches', 'image_pack', 'video_carousel', 'local_pack', 'shopping_results')),
    position INTEGER NOT NULL,
    title TEXT,
    description TEXT,
    opportunity TEXT,
    difficulty_score DECIMAL(3, 2) DEFAULT 0 CHECK (difficulty_score >= 0 AND difficulty_score <= 1),
    potential_score DECIMAL(3, 2) DEFAULT 0 CHECK (potential_score >= 0 AND potential_score <= 1),
    optimization_strategy TEXT,
    status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'optimizing', 'optimized', 'failed')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- SERP optimization recommendations
CREATE TABLE IF NOT EXISTS serp_optimization_recommendations (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    project_id UUID NOT NULL REFERENCES seo_projects(id) ON DELETE CASCADE,
    keyword TEXT NOT NULL,
    recommendation_type TEXT NOT NULL CHECK (recommendation_type IN ('featured_snippet', 'people_also_ask', 'related_searches', 'image_optimization', 'video_optimization', 'local_optimization')),
    current_status TEXT,
    target_status TEXT NOT NULL,
    optimization_steps TEXT[] DEFAULT '{}',
    expected_impact TEXT,
    implementation_difficulty TEXT DEFAULT 'medium' CHECK (implementation_difficulty IN ('easy', 'medium', 'hard')),
    estimated_traffic_lift INTEGER DEFAULT 0,
    priority_score DECIMAL(5, 2) DEFAULT 0,
    status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'in-progress', 'completed', 'dismissed')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =============================================================================
-- TEAM COLLABORATION SUITE TABLES
-- =============================================================================

-- Team members
CREATE TABLE IF NOT EXISTS team_members (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    project_id UUID NOT NULL REFERENCES seo_projects(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    role TEXT NOT NULL CHECK (role IN ('owner', 'admin', 'editor', 'viewer')),
    permissions JSONB DEFAULT '{}',
    performance_score DECIMAL(5, 2) DEFAULT 0,
    joined_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    last_active TIMESTAMP WITH TIME ZONE,
    UNIQUE(project_id, user_id)
);

-- Collaboration tasks
CREATE TABLE IF NOT EXISTS collaboration_tasks (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    project_id UUID NOT NULL REFERENCES seo_projects(id) ON DELETE CASCADE,
    assigned_to UUID REFERENCES auth.users(id),
    assigned_by UUID REFERENCES auth.users(id),
    task_type TEXT NOT NULL CHECK (task_type IN ('content_creation', 'seo_optimization', 'link_building', 'technical_audit', 'competitor_analysis', 'reporting')),
    title TEXT NOT NULL,
    description TEXT,
    priority TEXT DEFAULT 'medium' CHECK (priority IN ('low', 'medium', 'high', 'urgent')),
    status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'in-progress', 'review', 'completed', 'cancelled')),
    due_date TIMESTAMP WITH TIME ZONE,
    estimated_hours DECIMAL(5, 2),
    actual_hours DECIMAL(5, 2),
    completion_percentage INTEGER DEFAULT 0 CHECK (completion_percentage >= 0 AND completion_percentage <= 100),
    tags TEXT[] DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Team activity log
CREATE TABLE IF NOT EXISTS team_activity_log (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    project_id UUID NOT NULL REFERENCES seo_projects(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES auth.users(id),
    action_type TEXT NOT NULL,
    action_description TEXT NOT NULL,
    target_entity TEXT, -- 'keyword', 'page', 'task', etc.
    target_id UUID,
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =============================================================================
-- ENTERPRISE QUERY WHEEL TABLES
-- =============================================================================

-- Query wheel sessions
CREATE TABLE IF NOT EXISTS query_wheel_sessions (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    project_id UUID NOT NULL REFERENCES seo_projects(id) ON DELETE CASCADE,
    session_name TEXT NOT NULL,
    seed_keyword TEXT NOT NULL,
    target_audience TEXT,
    location TEXT,
    language TEXT DEFAULT 'en',
    generated_keywords TEXT[] DEFAULT '{}',
    keyword_categories JSONB DEFAULT '{}',
    session_data JSONB DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =============================================================================
-- INTENT MATCHER TABLES
-- =============================================================================

-- Intent analysis sessions
CREATE TABLE IF NOT EXISTS intent_analysis_sessions (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    project_id UUID NOT NULL REFERENCES seo_projects(id) ON DELETE CASCADE,
    session_name TEXT NOT NULL,
    content_text TEXT NOT NULL,
    target_queries TEXT[] DEFAULT '{}',
    analysis_results JSONB DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Intent matches
CREATE TABLE IF NOT EXISTS intent_matches (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    session_id UUID NOT NULL REFERENCES intent_analysis_sessions(id) ON DELETE CASCADE,
    query TEXT NOT NULL,
    intent_type TEXT NOT NULL CHECK (intent_type IN ('Informational', 'Navigational', 'Transactional', 'Commercial')),
    match_score DECIMAL(3, 2) NOT NULL CHECK (match_score >= 0 AND match_score <= 1),
    confidence_level DECIMAL(3, 2) NOT NULL CHECK (confidence_level >= 0 AND confidence_level <= 1),
    optimization_suggestions TEXT[] DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =============================================================================
-- AIO OPTIMIZER TABLES
-- =============================================================================

-- AI Overview optimization attempts
CREATE TABLE IF NOT EXISTS aio_optimization_attempts (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    project_id UUID NOT NULL REFERENCES seo_projects(id) ON DELETE CASCADE,
    target_query TEXT NOT NULL,
    original_content TEXT NOT NULL,
    optimized_snippet TEXT,
    extracted_entities TEXT[] DEFAULT '{}',
    optimization_score DECIMAL(5, 2) DEFAULT 0,
    performance_metrics JSONB DEFAULT '{}',
    status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'optimized', 'failed')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =============================================================================
-- PUBLIC RESEARCH REAL TIME TABLES
-- =============================================================================

-- Public research sessions
CREATE TABLE IF NOT EXISTS public_research_sessions (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    project_id UUID NOT NULL REFERENCES seo_projects(id) ON DELETE CASCADE,
    session_name TEXT NOT NULL,
    research_type TEXT NOT NULL CHECK (research_type IN ('keyword_research', 'competitor_analysis', 'trend_analysis', 'market_research')),
    search_terms TEXT[] DEFAULT '{}',
    filters JSONB DEFAULT '{}',
    results_count INTEGER DEFAULT 0,
    session_data JSONB DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Public research results
CREATE TABLE IF NOT EXISTS public_research_results (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    session_id UUID NOT NULL REFERENCES public_research_sessions(id) ON DELETE CASCADE,
    result_type TEXT NOT NULL,
    title TEXT,
    url TEXT,
    description TEXT,
    metadata JSONB DEFAULT '{}',
    relevance_score DECIMAL(3, 2) DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =============================================================================
-- ADVANCED ANALYTICS TABLES
-- =============================================================================

-- Custom analytics dashboards
CREATE TABLE IF NOT EXISTS analytics_dashboards (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    project_id UUID NOT NULL REFERENCES seo_projects(id) ON DELETE CASCADE,
    dashboard_name TEXT NOT NULL,
    description TEXT,
    widgets JSONB DEFAULT '[]',
    layout JSONB DEFAULT '{}',
    filters JSONB DEFAULT '{}',
    is_public BOOLEAN DEFAULT false,
    created_by UUID NOT NULL REFERENCES auth.users(id),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Analytics widgets
CREATE TABLE IF NOT EXISTS analytics_widgets (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    dashboard_id UUID NOT NULL REFERENCES analytics_dashboards(id) ON DELETE CASCADE,
    widget_type TEXT NOT NULL CHECK (widget_type IN ('chart', 'metric', 'table', 'map', 'funnel')),
    widget_name TEXT NOT NULL,
    data_source TEXT NOT NULL,
    query_parameters JSONB DEFAULT '{}',
    visualization_config JSONB DEFAULT '{}',
    position_x INTEGER DEFAULT 0,
    position_y INTEGER DEFAULT 0,
    width INTEGER DEFAULT 4,
    height INTEGER DEFAULT 3,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =============================================================================
-- CONTENT REPURPOSING TABLES (ENHANCED)
-- =============================================================================

-- Content repurposing sessions
CREATE TABLE IF NOT EXISTS content_repurposing_sessions (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    project_id UUID NOT NULL REFERENCES seo_projects(id) ON DELETE CASCADE,
    session_name TEXT NOT NULL,
    original_content TEXT NOT NULL,
    original_url TEXT,
    original_file_path TEXT,
    content_type TEXT NOT NULL CHECK (content_type IN ('url', 'file', 'text')),
    file_type TEXT,
    target_platforms TEXT[] DEFAULT '{}',
    tone TEXT DEFAULT 'professional',
    style TEXT DEFAULT 'informative',
    seo_data JSONB DEFAULT '{}',
    status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'processing', 'completed', 'failed')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Generated repurposed content
CREATE TABLE IF NOT EXISTS repurposed_content (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    session_id UUID NOT NULL REFERENCES content_repurposing_sessions(id) ON DELETE CASCADE,
    platform TEXT NOT NULL,
    content_title TEXT,
    content_body TEXT NOT NULL,
    word_count INTEGER DEFAULT 0,
    character_count INTEGER DEFAULT 0,
    hashtags TEXT[] DEFAULT '{}',
    mentions TEXT[] DEFAULT '{}',
    call_to_action TEXT,
    seo_optimizations JSONB DEFAULT '{}',
    performance_metrics JSONB DEFAULT '{}',
    status TEXT DEFAULT 'draft' CHECK (status IN ('draft', 'published', 'scheduled', 'failed')),
    published_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =============================================================================
-- REVENUE ATTRIBUTION TABLES
-- =============================================================================

-- Revenue attribution models
CREATE TABLE IF NOT EXISTS revenue_attribution_models (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    project_id UUID NOT NULL REFERENCES seo_projects(id) ON DELETE CASCADE,
    model_name TEXT NOT NULL,
    attribution_type TEXT NOT NULL CHECK (attribution_type IN ('first_touch', 'last_touch', 'linear', 'time_decay', 'position_based', 'data_driven')),
    lookback_window INTEGER DEFAULT 30, -- days
    conversion_events TEXT[] DEFAULT '{}',
    revenue_metrics JSONB DEFAULT '{}',
    status TEXT DEFAULT 'active' CHECK (status IN ('active', 'inactive', 'testing')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Revenue attribution data
CREATE TABLE IF NOT EXISTS revenue_attribution_data (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    project_id UUID NOT NULL REFERENCES seo_projects(id) ON DELETE CASCADE,
    model_id UUID NOT NULL REFERENCES revenue_attribution_models(id) ON DELETE CASCADE,
    date DATE NOT NULL,
    traffic_source TEXT NOT NULL,
    medium TEXT,
    campaign TEXT,
    keyword TEXT,
    page_path TEXT,
    sessions INTEGER DEFAULT 0,
    conversions INTEGER DEFAULT 0,
    revenue DECIMAL(15, 2) DEFAULT 0,
    attributed_revenue DECIMAL(15, 2) DEFAULT 0,
    attribution_weight DECIMAL(5, 4) DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =============================================================================
-- MULTI-LOCATION TRACKING TABLES
-- =============================================================================

-- Multi-location projects
CREATE TABLE IF NOT EXISTS multi_location_projects (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    project_id UUID NOT NULL REFERENCES seo_projects(id) ON DELETE CASCADE,
    location_name TEXT NOT NULL,
    country TEXT NOT NULL,
    city TEXT,
    language TEXT DEFAULT 'en',
    currency TEXT DEFAULT 'USD',
    timezone TEXT DEFAULT 'UTC',
    local_domain TEXT,
    local_keywords TEXT[] DEFAULT '{}',
    local_competitors TEXT[] DEFAULT '{}',
    status TEXT DEFAULT 'active' CHECK (status IN ('active', 'inactive', 'paused')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Multi-location rankings
CREATE TABLE IF NOT EXISTS multi_location_rankings (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    location_project_id UUID NOT NULL REFERENCES multi_location_projects(id) ON DELETE CASCADE,
    keyword TEXT NOT NULL,
    position INTEGER,
    search_volume INTEGER DEFAULT 0,
    competition_score DECIMAL(3, 2) DEFAULT 0,
    local_competition TEXT[] DEFAULT '{}',
    tracking_date DATE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =============================================================================
-- WHITE LABEL REPORTS TABLES
-- =============================================================================

-- White label clients
CREATE TABLE IF NOT EXISTS white_label_clients (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    project_id UUID NOT NULL REFERENCES seo_projects(id) ON DELETE CASCADE,
    client_name TEXT NOT NULL,
    client_domain TEXT,
    logo_url TEXT,
    brand_colors JSONB DEFAULT '{}',
    contact_email TEXT,
    contact_phone TEXT,
    billing_address JSONB DEFAULT '{}',
    status TEXT DEFAULT 'active' CHECK (status IN ('active', 'inactive', 'suspended')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- White label report templates
CREATE TABLE IF NOT EXISTS white_label_report_templates (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    client_id UUID NOT NULL REFERENCES white_label_clients(id) ON DELETE CASCADE,
    template_name TEXT NOT NULL,
    template_type TEXT NOT NULL CHECK (template_type IN ('monthly_report', 'quarterly_report', 'annual_report', 'custom')),
    sections JSONB DEFAULT '[]',
    branding JSONB DEFAULT '{}',
    automation_settings JSONB DEFAULT '{}',
    is_default BOOLEAN DEFAULT false,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Generated white label reports
CREATE TABLE IF NOT EXISTS white_label_reports (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    client_id UUID NOT NULL REFERENCES white_label_clients(id) ON DELETE CASCADE,
    template_id UUID REFERENCES white_label_report_templates(id) ON DELETE SET NULL,
    report_name TEXT NOT NULL,
    report_period TEXT NOT NULL,
    report_data JSONB DEFAULT '{}',
    file_url TEXT,
    status TEXT DEFAULT 'generating' CHECK (status IN ('generating', 'completed', 'failed', 'sent')),
    generated_at TIMESTAMP WITH TIME ZONE,
    sent_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =============================================================================
-- CROSS-CHANNEL ANALYTICS TABLES
-- =============================================================================

-- Cross-channel campaigns
CREATE TABLE IF NOT EXISTS cross_channel_campaigns (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    project_id UUID NOT NULL REFERENCES seo_projects(id) ON DELETE CASCADE,
    campaign_name TEXT NOT NULL,
    campaign_type TEXT NOT NULL CHECK (campaign_type IN ('seo', 'ppc', 'social', 'email', 'content', 'integrated')),
    start_date DATE NOT NULL,
    end_date DATE,
    budget DECIMAL(15, 2) DEFAULT 0,
    target_audience JSONB DEFAULT '{}',
    channels TEXT[] DEFAULT '{}',
    goals JSONB DEFAULT '{}',
    status TEXT DEFAULT 'active' CHECK (status IN ('planning', 'active', 'paused', 'completed', 'cancelled')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Cross-channel performance data
CREATE TABLE IF NOT EXISTS cross_channel_performance (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    campaign_id UUID NOT NULL REFERENCES cross_channel_campaigns(id) ON DELETE CASCADE,
    date DATE NOT NULL,
    channel TEXT NOT NULL,
    medium TEXT,
    source TEXT,
    impressions INTEGER DEFAULT 0,
    clicks INTEGER DEFAULT 0,
    conversions INTEGER DEFAULT 0,
    revenue DECIMAL(15, 2) DEFAULT 0,
    cost DECIMAL(15, 2) DEFAULT 0,
    roi DECIMAL(5, 4) DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =============================================================================
-- INDEXES FOR PERFORMANCE
-- =============================================================================

-- Content Strategy Indexes
CREATE INDEX IF NOT EXISTS idx_content_strategies_project_id ON content_strategies(project_id);
CREATE INDEX IF NOT EXISTS idx_content_strategies_status ON content_strategies(status);
CREATE INDEX IF NOT EXISTS idx_content_pillars_strategy_id ON content_pillars(strategy_id);
CREATE INDEX IF NOT EXISTS idx_content_calendar_items_strategy_id ON content_calendar_items(strategy_id);
CREATE INDEX IF NOT EXISTS idx_content_calendar_items_date ON content_calendar_items(scheduled_date);
CREATE INDEX IF NOT EXISTS idx_competitor_content_gaps_strategy_id ON competitor_content_gaps(strategy_id);

-- Predictive Analytics Indexes
CREATE INDEX IF NOT EXISTS idx_predictive_models_project_id ON predictive_models(project_id);
CREATE INDEX IF NOT EXISTS idx_predictive_models_type ON predictive_models(model_type);
CREATE INDEX IF NOT EXISTS idx_predictive_forecasts_project_id ON predictive_forecasts(project_id);
CREATE INDEX IF NOT EXISTS idx_predictive_forecasts_model_id ON predictive_forecasts(model_id);
CREATE INDEX IF NOT EXISTS idx_predictive_forecasts_date ON predictive_forecasts(forecast_date);

-- SERP Optimizer Indexes
CREATE INDEX IF NOT EXISTS idx_serp_feature_analysis_project_id ON serp_feature_analysis(project_id);
CREATE INDEX IF NOT EXISTS idx_serp_feature_analysis_keyword ON serp_feature_analysis(keyword);
CREATE INDEX IF NOT EXISTS idx_serp_optimization_recommendations_project_id ON serp_optimization_recommendations(project_id);
CREATE INDEX IF NOT EXISTS idx_serp_optimization_recommendations_keyword ON serp_optimization_recommendations(keyword);

-- Team Collaboration Indexes
CREATE INDEX IF NOT EXISTS idx_team_members_project_id ON team_members(project_id);
CREATE INDEX IF NOT EXISTS idx_team_members_user_id ON team_members(user_id);
CREATE INDEX IF NOT EXISTS idx_collaboration_tasks_project_id ON collaboration_tasks(project_id);
CREATE INDEX IF NOT EXISTS idx_collaboration_tasks_assigned_to ON collaboration_tasks(assigned_to);
CREATE INDEX IF NOT EXISTS idx_collaboration_tasks_status ON collaboration_tasks(status);
CREATE INDEX IF NOT EXISTS idx_team_activity_log_project_id ON team_activity_log(project_id);
CREATE INDEX IF NOT EXISTS idx_team_activity_log_user_id ON team_activity_log(user_id);

-- Enterprise Indexes
CREATE INDEX IF NOT EXISTS idx_query_wheel_sessions_project_id ON query_wheel_sessions(project_id);
CREATE INDEX IF NOT EXISTS idx_intent_analysis_sessions_project_id ON intent_analysis_sessions(project_id);
CREATE INDEX IF NOT EXISTS idx_intent_matches_session_id ON intent_matches(session_id);
CREATE INDEX IF NOT EXISTS idx_aio_optimization_attempts_project_id ON aio_optimization_attempts(project_id);

-- Public Research Indexes
CREATE INDEX IF NOT EXISTS idx_public_research_sessions_project_id ON public_research_sessions(project_id);
CREATE INDEX IF NOT EXISTS idx_public_research_results_session_id ON public_research_results(session_id);

-- Analytics Indexes
CREATE INDEX IF NOT EXISTS idx_analytics_dashboards_project_id ON analytics_dashboards(project_id);
CREATE INDEX IF NOT EXISTS idx_analytics_widgets_dashboard_id ON analytics_widgets(dashboard_id);

-- Content Repurposing Indexes
CREATE INDEX IF NOT EXISTS idx_content_repurposing_sessions_project_id ON content_repurposing_sessions(project_id);
CREATE INDEX IF NOT EXISTS idx_repurposed_content_session_id ON repurposed_content(session_id);
CREATE INDEX IF NOT EXISTS idx_repurposed_content_platform ON repurposed_content(platform);

-- Revenue Attribution Indexes
CREATE INDEX IF NOT EXISTS idx_revenue_attribution_models_project_id ON revenue_attribution_models(project_id);
CREATE INDEX IF NOT EXISTS idx_revenue_attribution_data_project_id ON revenue_attribution_data(project_id);
CREATE INDEX IF NOT EXISTS idx_revenue_attribution_data_date ON revenue_attribution_data(date);

-- Multi-Location Indexes
CREATE INDEX IF NOT EXISTS idx_multi_location_projects_project_id ON multi_location_projects(project_id);
CREATE INDEX IF NOT EXISTS idx_multi_location_rankings_location_id ON multi_location_rankings(location_project_id);
CREATE INDEX IF NOT EXISTS idx_multi_location_rankings_date ON multi_location_rankings(tracking_date);

-- White Label Indexes
CREATE INDEX IF NOT EXISTS idx_white_label_clients_project_id ON white_label_clients(project_id);
CREATE INDEX IF NOT EXISTS idx_white_label_report_templates_client_id ON white_label_report_templates(client_id);
CREATE INDEX IF NOT EXISTS idx_white_label_reports_client_id ON white_label_reports(client_id);

-- Cross-Channel Indexes
CREATE INDEX IF NOT EXISTS idx_cross_channel_campaigns_project_id ON cross_channel_campaigns(project_id);
CREATE INDEX IF NOT EXISTS idx_cross_channel_performance_campaign_id ON cross_channel_performance(campaign_id);
CREATE INDEX IF NOT EXISTS idx_cross_channel_performance_date ON cross_channel_performance(date);

-- =============================================================================
-- ROW LEVEL SECURITY POLICIES
-- =============================================================================

-- Enable RLS on all new tables
ALTER TABLE content_strategies ENABLE ROW LEVEL SECURITY;
ALTER TABLE content_pillars ENABLE ROW LEVEL SECURITY;
ALTER TABLE content_calendar_items ENABLE ROW LEVEL SECURITY;
ALTER TABLE competitor_content_gaps ENABLE ROW LEVEL SECURITY;
ALTER TABLE predictive_models ENABLE ROW LEVEL SECURITY;
ALTER TABLE predictive_forecasts ENABLE ROW LEVEL SECURITY;
ALTER TABLE serp_feature_analysis ENABLE ROW LEVEL SECURITY;
ALTER TABLE serp_optimization_recommendations ENABLE ROW LEVEL SECURITY;
ALTER TABLE team_members ENABLE ROW LEVEL SECURITY;
ALTER TABLE collaboration_tasks ENABLE ROW LEVEL SECURITY;
ALTER TABLE team_activity_log ENABLE ROW LEVEL SECURITY;
ALTER TABLE query_wheel_sessions ENABLE ROW LEVEL SECURITY;
ALTER TABLE intent_analysis_sessions ENABLE ROW LEVEL SECURITY;
ALTER TABLE intent_matches ENABLE ROW LEVEL SECURITY;
ALTER TABLE aio_optimization_attempts ENABLE ROW LEVEL SECURITY;
ALTER TABLE public_research_sessions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public_research_results ENABLE ROW LEVEL SECURITY;
ALTER TABLE analytics_dashboards ENABLE ROW LEVEL SECURITY;
ALTER TABLE analytics_widgets ENABLE ROW LEVEL SECURITY;
ALTER TABLE content_repurposing_sessions ENABLE ROW LEVEL SECURITY;
ALTER TABLE repurposed_content ENABLE ROW LEVEL SECURITY;
ALTER TABLE revenue_attribution_models ENABLE ROW LEVEL SECURITY;
ALTER TABLE revenue_attribution_data ENABLE ROW LEVEL SECURITY;
ALTER TABLE multi_location_projects ENABLE ROW LEVEL SECURITY;
ALTER TABLE multi_location_rankings ENABLE ROW LEVEL SECURITY;
ALTER TABLE white_label_clients ENABLE ROW LEVEL SECURITY;
ALTER TABLE white_label_report_templates ENABLE ROW LEVEL SECURITY;
ALTER TABLE white_label_reports ENABLE ROW LEVEL SECURITY;
ALTER TABLE cross_channel_campaigns ENABLE ROW LEVEL SECURITY;
ALTER TABLE cross_channel_performance ENABLE ROW LEVEL SECURITY;

-- Content Strategy Policies
CREATE POLICY "Users can manage content strategies for their projects" ON content_strategies
    FOR ALL USING (project_id IN (SELECT id FROM seo_projects WHERE user_id = auth.uid()));

CREATE POLICY "Users can manage content pillars for their strategies" ON content_pillars
    FOR ALL USING (strategy_id IN (SELECT id FROM content_strategies WHERE project_id IN (SELECT id FROM seo_projects WHERE user_id = auth.uid())));

CREATE POLICY "Users can manage content calendar items for their strategies" ON content_calendar_items
    FOR ALL USING (strategy_id IN (SELECT id FROM content_strategies WHERE project_id IN (SELECT id FROM seo_projects WHERE user_id = auth.uid())));

CREATE POLICY "Users can manage competitor content gaps for their strategies" ON competitor_content_gaps
    FOR ALL USING (strategy_id IN (SELECT id FROM content_strategies WHERE project_id IN (SELECT id FROM seo_projects WHERE user_id = auth.uid())));

-- Predictive Analytics Policies
CREATE POLICY "Users can manage predictive models for their projects" ON predictive_models
    FOR ALL USING (project_id IN (SELECT id FROM seo_projects WHERE user_id = auth.uid()));

CREATE POLICY "Users can manage predictive forecasts for their projects" ON predictive_forecasts
    FOR ALL USING (project_id IN (SELECT id FROM seo_projects WHERE user_id = auth.uid()));

-- SERP Optimizer Policies
CREATE POLICY "Users can manage SERP feature analysis for their projects" ON serp_feature_analysis
    FOR ALL USING (project_id IN (SELECT id FROM seo_projects WHERE user_id = auth.uid()));

CREATE POLICY "Users can manage SERP optimization recommendations for their projects" ON serp_optimization_recommendations
    FOR ALL USING (project_id IN (SELECT id FROM seo_projects WHERE user_id = auth.uid()));

-- Team Collaboration Policies
CREATE POLICY "Users can manage team members for their projects" ON team_members
    FOR ALL USING (project_id IN (SELECT id FROM seo_projects WHERE user_id = auth.uid()) OR user_id = auth.uid());

CREATE POLICY "Users can manage collaboration tasks for their projects" ON collaboration_tasks
    FOR ALL USING (project_id IN (SELECT id FROM seo_projects WHERE user_id = auth.uid()) OR assigned_to = auth.uid());

CREATE POLICY "Users can view team activity for their projects" ON team_activity_log
    FOR SELECT USING (project_id IN (SELECT id FROM seo_projects WHERE user_id = auth.uid()));

-- Enterprise Policies
CREATE POLICY "Users can manage query wheel sessions for their projects" ON query_wheel_sessions
    FOR ALL USING (project_id IN (SELECT id FROM seo_projects WHERE user_id = auth.uid()));

CREATE POLICY "Users can manage intent analysis sessions for their projects" ON intent_analysis_sessions
    FOR ALL USING (project_id IN (SELECT id FROM seo_projects WHERE user_id = auth.uid()));

CREATE POLICY "Users can manage intent matches for their sessions" ON intent_matches
    FOR ALL USING (session_id IN (SELECT id FROM intent_analysis_sessions WHERE project_id IN (SELECT id FROM seo_projects WHERE user_id = auth.uid())));

CREATE POLICY "Users can manage AIO optimization attempts for their projects" ON aio_optimization_attempts
    FOR ALL USING (project_id IN (SELECT id FROM seo_projects WHERE user_id = auth.uid()));

-- Public Research Policies
CREATE POLICY "Users can manage public research sessions for their projects" ON public_research_sessions
    FOR ALL USING (project_id IN (SELECT id FROM seo_projects WHERE user_id = auth.uid()));

CREATE POLICY "Users can manage public research results for their sessions" ON public_research_results
    FOR ALL USING (session_id IN (SELECT id FROM public_research_sessions WHERE project_id IN (SELECT id FROM seo_projects WHERE user_id = auth.uid())));

-- Analytics Policies
CREATE POLICY "Users can manage analytics dashboards for their projects" ON analytics_dashboards
    FOR ALL USING (project_id IN (SELECT id FROM seo_projects WHERE user_id = auth.uid()));

CREATE POLICY "Users can manage analytics widgets for their dashboards" ON analytics_widgets
    FOR ALL USING (dashboard_id IN (SELECT id FROM analytics_dashboards WHERE project_id IN (SELECT id FROM seo_projects WHERE user_id = auth.uid())));

-- Content Repurposing Policies
CREATE POLICY "Users can manage content repurposing sessions for their projects" ON content_repurposing_sessions
    FOR ALL USING (project_id IN (SELECT id FROM seo_projects WHERE user_id = auth.uid()));

CREATE POLICY "Users can manage repurposed content for their sessions" ON repurposed_content
    FOR ALL USING (session_id IN (SELECT id FROM content_repurposing_sessions WHERE project_id IN (SELECT id FROM seo_projects WHERE user_id = auth.uid())));

-- Revenue Attribution Policies
CREATE POLICY "Users can manage revenue attribution models for their projects" ON revenue_attribution_models
    FOR ALL USING (project_id IN (SELECT id FROM seo_projects WHERE user_id = auth.uid()));

CREATE POLICY "Users can manage revenue attribution data for their projects" ON revenue_attribution_data
    FOR ALL USING (project_id IN (SELECT id FROM seo_projects WHERE user_id = auth.uid()));

-- Multi-Location Policies
CREATE POLICY "Users can manage multi-location projects for their projects" ON multi_location_projects
    FOR ALL USING (project_id IN (SELECT id FROM seo_projects WHERE user_id = auth.uid()));

CREATE POLICY "Users can manage multi-location rankings for their locations" ON multi_location_rankings
    FOR ALL USING (location_project_id IN (SELECT id FROM multi_location_projects WHERE project_id IN (SELECT id FROM seo_projects WHERE user_id = auth.uid())));

-- White Label Policies
CREATE POLICY "Users can manage white label clients for their projects" ON white_label_clients
    FOR ALL USING (project_id IN (SELECT id FROM seo_projects WHERE user_id = auth.uid()));

CREATE POLICY "Users can manage white label report templates for their clients" ON white_label_report_templates
    FOR ALL USING (client_id IN (SELECT id FROM white_label_clients WHERE project_id IN (SELECT id FROM seo_projects WHERE user_id = auth.uid())));

CREATE POLICY "Users can manage white label reports for their clients" ON white_label_reports
    FOR ALL USING (client_id IN (SELECT id FROM white_label_clients WHERE project_id IN (SELECT id FROM seo_projects WHERE user_id = auth.uid())));

-- Cross-Channel Policies
CREATE POLICY "Users can manage cross-channel campaigns for their projects" ON cross_channel_campaigns
    FOR ALL USING (project_id IN (SELECT id FROM seo_projects WHERE user_id = auth.uid()));

CREATE POLICY "Users can manage cross-channel performance for their campaigns" ON cross_channel_performance
    FOR ALL USING (campaign_id IN (SELECT id FROM cross_channel_campaigns WHERE project_id IN (SELECT id FROM seo_projects WHERE user_id = auth.uid())));

-- =============================================================================
-- HELPER FUNCTIONS
-- =============================================================================

-- Function to calculate content strategy ROI
CREATE OR REPLACE FUNCTION calculate_content_strategy_roi(
    strategy_id UUID,
    start_date DATE,
    end_date DATE
) RETURNS DECIMAL(15, 2) AS $$
DECLARE
    total_investment DECIMAL(15, 2);
    total_revenue DECIMAL(15, 2);
    roi DECIMAL(15, 2);
BEGIN
    -- Calculate total investment (time, tools, etc.)
    SELECT COALESCE(SUM(actual_hours * 50), 0) -- Assuming $50/hour
    INTO total_investment
    FROM collaboration_tasks ct
    JOIN content_calendar_items cci ON ct.id = cci.id
    WHERE cci.strategy_id = strategy_id
    AND ct.created_at::date BETWEEN start_date AND end_date;
    
    -- Calculate total revenue from attribution
    SELECT COALESCE(SUM(attributed_revenue), 0)
    INTO total_revenue
    FROM revenue_attribution_data rad
    JOIN revenue_attribution_models ram ON rad.model_id = ram.id
    WHERE ram.project_id = (SELECT project_id FROM content_strategies WHERE id = strategy_id)
    AND rad.date BETWEEN start_date AND end_date;
    
    roi := CASE 
        WHEN total_investment > 0 THEN ((total_revenue - total_investment) / total_investment) * 100
        ELSE 0
    END;
    
    RETURN roi;
END;
$$ LANGUAGE plpgsql;

-- Function to get team performance metrics
CREATE OR REPLACE FUNCTION get_team_performance_metrics(
    p_project_id UUID,
    p_start_date DATE,
    p_end_date DATE
) RETURNS TABLE (
    user_id UUID,
    user_name TEXT,
    tasks_completed INTEGER,
    total_hours DECIMAL(8, 2),
    avg_task_duration DECIMAL(8, 2),
    performance_score DECIMAL(5, 2)
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        tm.user_id,
        p.first_name || ' ' || p.last_name as user_name,
        COUNT(CASE WHEN ct.status = 'completed' THEN 1 END) as tasks_completed,
        COALESCE(SUM(ct.actual_hours), 0) as total_hours,
        COALESCE(AVG(ct.actual_hours), 0) as avg_task_duration,
        tm.performance_score
    FROM team_members tm
    LEFT JOIN profiles p ON tm.user_id = p.id
    LEFT JOIN collaboration_tasks ct ON tm.user_id = ct.assigned_to
        AND ct.created_at::date BETWEEN p_start_date AND p_end_date
    WHERE tm.project_id = p_project_id
    GROUP BY tm.user_id, p.first_name, p.last_name, tm.performance_score
    ORDER BY performance_score DESC;
END;
$$ LANGUAGE plpgsql;

-- Function to predict keyword ranking
CREATE OR REPLACE FUNCTION predict_keyword_ranking(
    p_project_id UUID,
    p_keyword TEXT,
    p_days_ahead INTEGER DEFAULT 30
) RETURNS DECIMAL(8, 2) AS $$
DECLARE
    current_rank DECIMAL(8, 2);
    trend_factor DECIMAL(8, 4);
    predicted_rank DECIMAL(8, 2);
BEGIN
    -- Get current ranking
    SELECT COALESCE(AVG(position), 100)
    INTO current_rank
    FROM serp_rankings
    WHERE project_id = p_project_id
    AND keyword = p_keyword
    AND tracking_date = (SELECT MAX(tracking_date) FROM serp_rankings WHERE project_id = p_project_id AND keyword = p_keyword);
    
    -- Calculate trend factor from recent data
    WITH recent_rankings AS (
        SELECT position, tracking_date
        FROM serp_rankings
        WHERE project_id = p_project_id
        AND keyword = p_keyword
        AND tracking_date >= CURRENT_DATE - INTERVAL '30 days'
        ORDER BY tracking_date DESC
        LIMIT 10
    )
    SELECT COALESCE(
        (SELECT AVG(position) FROM recent_rankings LIMIT 5) - 
        (SELECT AVG(position) FROM recent_rankings OFFSET 5),
        0
    ) / 5.0
    INTO trend_factor;
    
    -- Predict future ranking
    predicted_rank := current_rank + (trend_factor * p_days_ahead);
    
    -- Ensure ranking is within reasonable bounds
    predicted_rank := GREATEST(1, LEAST(100, predicted_rank));
    
    RETURN predicted_rank;
END;
$$ LANGUAGE plpgsql;

COMMENT ON TABLE content_strategies IS 'AI-generated content strategies with pillars and calendar';
COMMENT ON TABLE predictive_models IS 'Machine learning models for SEO predictions';
COMMENT ON TABLE serp_feature_analysis IS 'Analysis of SERP features and optimization opportunities';
COMMENT ON TABLE team_members IS 'Team collaboration and member management';
COMMENT ON TABLE collaboration_tasks IS 'Task management for team collaboration';
COMMENT ON TABLE query_wheel_sessions IS 'Enterprise query wheel keyword generation sessions';
COMMENT ON TABLE intent_analysis_sessions IS 'Search intent analysis and matching';
COMMENT ON TABLE aio_optimization_attempts IS 'AI Overview optimization attempts and results';
COMMENT ON TABLE public_research_sessions IS 'Public research and trend analysis sessions';
COMMENT ON TABLE analytics_dashboards IS 'Custom analytics dashboards with widgets';
COMMENT ON TABLE content_repurposing_sessions IS 'Content repurposing workflow sessions';
COMMENT ON TABLE revenue_attribution_models IS 'Revenue attribution models and tracking';
COMMENT ON TABLE multi_location_projects IS 'Multi-location SEO tracking projects';
COMMENT ON TABLE white_label_clients IS 'White label client management';
COMMENT ON TABLE cross_channel_campaigns IS 'Cross-channel marketing campaign tracking';
